package it.pagopa.ecommerce.commons.domain.pojos;

import it.pagopa.ecommerce.commons.documents.TransactionAuthorizationCompletedEvent;
import it.pagopa.ecommerce.commons.documents.TransactionAuthorizationStatusUpdateData;
import it.pagopa.ecommerce.commons.documents.TransactionAuthorizedData;
import it.pagopa.ecommerce.commons.generated.server.model.AuthorizationResultDto;
import it.pagopa.ecommerce.commons.generated.server.model.TransactionStatusDto;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.FieldDefaults;

/**
 * <p>
 * POJO for a transaction with a successful authorization.
 * </p>
 * <p>
 * All accrued data is exposed through the same structure generated by
 * {@link TransactionAuthorizationCompletedEvent
 * TransactionAuthorizedEvent}, namely
 * {@link it.pagopa.ecommerce.commons.documents.TransactionAuthorizedData
 * TransactionAuthorizedData}.
 * </p>
 *
 * @see BaseTransaction
 * @see TransactionAuthorizationCompletedEvent
 */
@ToString
@EqualsAndHashCode(callSuper = true)
@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
@Getter
public abstract class BaseTransactionAuthorized extends BaseTransactionWithCompletedAuthorization {
    TransactionAuthorizedData transactionAuthorizedData;

    /**
     * Primary constructor
     *
     * @param baseTransaction           base transaction
     * @param transactionAuthorizedData transaction authorization data
     */
    protected BaseTransactionAuthorized(
            BaseTransactionWithRequestedAuthorization baseTransaction,
            TransactionAuthorizedData transactionAuthorizedData
    ) {
        super(
                baseTransaction,
                new TransactionAuthorizationStatusUpdateData(
                        AuthorizationResultDto.OK,
                        TransactionStatusDto.AUTHORIZED
                )
        );
        this.transactionAuthorizedData = transactionAuthorizedData;
    }
}
