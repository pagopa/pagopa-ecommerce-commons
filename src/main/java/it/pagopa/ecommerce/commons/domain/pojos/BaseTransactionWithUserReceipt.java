package it.pagopa.ecommerce.commons.domain.pojos;

import it.pagopa.ecommerce.commons.documents.TransactionAddReceiptData;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.FieldDefaults;

/**
 * <p>
 * POJO for a notified transaction. Note that this POJO is used both for
 * successful and unsuccessful notification
 * </p>
 * <p>
 * All accrued data is exposed through the same structure generated by
 * {@link it.pagopa.ecommerce.commons.documents.TransactionUserReceiptAddedEvent
 * TransactionUserReceiptAddedEvent}, namely
 * {@link it.pagopa.ecommerce.commons.documents.TransactionAddReceiptData
 * TransactionAddReceiptData}.
 * </p>
 *
 * @see BaseTransaction
 * @see it.pagopa.ecommerce.commons.documents.TransactionClosureSentEvent
 *      TransactionClosureSentEvent
 */
@ToString
@EqualsAndHashCode(callSuper = true)
@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
@Getter
public abstract class BaseTransactionWithUserReceipt extends BaseTransactionClosed {

    TransactionAddReceiptData transactionAddReceiptData;

    /**
     * Main constructor.
     *
     * @param baseTransaction                     transaction to extend with
     *                                            authorization data
     * @param transactionAddReceiptData authorization data
     */
    protected BaseTransactionWithUserReceipt(
            BaseTransactionClosed baseTransaction,
            TransactionAddReceiptData transactionAddReceiptData
    ) {
        super(baseTransaction, baseTransaction.getTransactionClosureSendData());
        this.transactionAddReceiptData = transactionAddReceiptData;
    }
}
