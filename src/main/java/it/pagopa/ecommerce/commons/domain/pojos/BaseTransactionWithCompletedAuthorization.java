package it.pagopa.ecommerce.commons.domain.pojos;

import it.pagopa.ecommerce.commons.generated.events.v1.TransactionAuthorizationStatusUpdateData;
import lombok.AccessLevel;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.FieldDefaults;

/**
 * <p>
 *     POJO for a transaction with a completed authorization. Note that this POJO is used both for successful and unsuccessful authorizations.
 * </p>
 * <p>
 *     All accrued data is exposed through the same structure generated by {@link it.pagopa.ecommerce.commons.generated.events.v1.TransactionAuthorizationStatusUpdatedEvent TransactionAuthorizationStatusUpdatedEvent},
 *     namely {@link it.pagopa.ecommerce.commons.generated.events.v1.TransactionAuthorizationStatusUpdateData TransactionAuthorizationStatusUpdateData}.
 * </p>
 *
 * @see BaseTransaction
 * @see it.pagopa.ecommerce.commons.generated.events.v1.TransactionAuthorizationStatusUpdatedEvent TransactionAuthorizationStatusUpdatedEvent
 */
@ToString
@EqualsAndHashCode(callSuper = true)
@FieldDefaults(makeFinal = true, level = AccessLevel.PRIVATE)
@Getter
public abstract class BaseTransactionWithCompletedAuthorization extends BaseTransactionWithRequestedAuthorization {

    TransactionAuthorizationStatusUpdateData transactionAuthorizationStatusUpdateData;

    /**
     * Primary constructor
     *
     * @param baseTransaction base transaction
     * @param transactionAuthorizationStatusUpdateData data related to authorization status update
     */
    protected BaseTransactionWithCompletedAuthorization(
            BaseTransactionWithRequestedAuthorization baseTransaction,
            TransactionAuthorizationStatusUpdateData transactionAuthorizationStatusUpdateData
    ) {
        super(baseTransaction, baseTransaction.getTransactionAuthorizationRequestData());
        this.transactionAuthorizationStatusUpdateData = transactionAuthorizationStatusUpdateData;
    }
}
